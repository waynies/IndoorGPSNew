package com.IndoorGPS;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.IndoorGPS.LocalizerBasicClass.ConfigSettings;
import com.IndoorGPS.LocalizerBasicClass.DB;
import com.IndoorGPS.LocalizerBasicClass.LocDB;
import com.IndoorGPS.LocalizerBasicClass.ObtainFPDB;
import com.IndoorGPS.LocalizerBasicClass.Orientation;
import com.google.android.maps.MapController;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Paint;
import android.graphics.Point;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Environment;
import android.os.PowerManager;
import android.preference.PreferenceManager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Toast;

public class MapFeatureActivity extends Activity{
	private final String MSG_TAG = "MapFeatureActivity ->";

	private int screenWidth;
	private int screenHeight;
	
	private String mapFilePath = null;
	private File mapFile;
	private String chooseMapFile;
	
	public static SharedPreferences sharedPrefs;
	private String Building;
	private String Floor;
	private String testMode;
	
	// power manager
	protected PowerManager.WakeLock mWakeLock;
	
	private Bitmap bm;
	private GPSMapView gpsMapView;
	private LocalizerMapView locMapView;
	private DisplayMetrics dm;
	private MapController myMapController;
	
	private List<Point> RefPtList = new ArrayList<Point>();
	private List<Integer> ClusterList = new ArrayList<Integer>();
	private List<Integer> cheadlist = new ArrayList<Integer>();
	
	private String fpFile;
	private HashMap<Orientation, String> clusterFile = new HashMap<Orientation, String>();

	private static final int REQ_CLUSTER_CHECK = 5;
	private String orientation;
	
	private final SensorEventListener mListener = new SensorEventListener() {
		public void onSensorChanged(SensorEvent event) {
			if (gpsMapView != null) {
				gpsMapView.setAzimuth(event.values);
				gpsMapView.invalidate();
			}
		}

		public void onAccuracyChanged(Sensor sensor, int accuracy) {
		}
	};
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		
		File root = Environment.getExternalStorageDirectory();
		sharedPrefs = PreferenceManager
		.getDefaultSharedPreferences(getBaseContext());
		
		updatePrefSettings();

		WindowManager w = getWindowManager();
		Display disp = w.getDefaultDisplay();
		dm = new DisplayMetrics();
		disp.getMetrics(dm);

		// set this map activity to full screen
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		
		// keep screen always on until this activity is destroyed
		PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
		mWakeLock = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, MSG_TAG);
		mWakeLock.acquire();
		
		chooseMapFile = String.format("%s%s", Building, Floor);
		if(chooseMapFile.equalsIgnoreCase("CNIB2")){
			//mapFilePath = "/mnt/sdcard/LOST.DIR/CNIB2.JPG";
			mapFilePath = root + "/Maps/CNIB2.JPG";
		}
		else if (chooseMapFile.equalsIgnoreCase("Bahen4")){
			//mapFilePath = "/mnt/sdcard/LOST.DIR/Bahen4.jpg";
			mapFilePath = root + "/Maps/Bahen4.jpg";
		}
		
		mapFile = new File(mapFilePath);
		
		if (!mapFile.exists()) {
			Toast.makeText(this, "map file not found.", Toast.LENGTH_SHORT)
					.show();
			return;
		}
		bm = BitmapFactory.decodeFile(mapFilePath);

		screenWidth = disp.getWidth();
		screenHeight = disp.getHeight();
		
		Paint paint = new Paint();
		paint.setColor(0xFFFFFF00);
		
		boolean noErr = true;
		try 
		{
			ConfigSettings.InitColor();
			ConfigSettings.Initialization(root + "/IndoorLocResouce/Config.txt");
			noErr = LocDB.LoadAdditionalDatabase(Building, Floor, true, true);
		} 
		catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		if (!noErr)
        {
			Utilities.displayMsgBox(MSG_TAG, "Missing Files, Load Database Failed");
        }
		
		gpsMapView = new FeatureMapView(this, bm, screenWidth,
					screenHeight, paint, true, true);
		
		setContentView(gpsMapView);
	}
	
	
	// *****************************************************************
	// onCreateOptionsMenu
	//
	//
	//
	// *****************************************************************
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		Log.d(MSG_TAG, "onCreateOptionsMenu entry");
		
		updatePrefSettings();

		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.mapfeaturemenu, menu);
		Log.d(MSG_TAG, "onCreateOptionsMenu exit");
		return true;		
	}
	
	// *****************************************************************
	// onOptionsItemSelected
	//
	//
	//
	// *****************************************************************
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle item selection
		switch (item.getItemId()) {
		case R.id.cluster:
			
			// Popup dialog to choose destination
			Intent intent = new Intent();
			intent.setClass(MapFeatureActivity.this, ChooseClusterInfo.class);
			startActivityForResult(intent, REQ_CLUSTER_CHECK);
		
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}
	

	// *****************************************************************
	// onActivityResult
	//
	//
	//
	// *****************************************************************
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		if(resultCode==RESULT_OK && requestCode == REQ_CLUSTER_CHECK)
		{
			orientation = null;
			orientation = data.getStringExtra("orientation");
			
			DrawClusterInfo(orientation);
			
		}
	}

	private boolean DrawClusterInfo(String o)
	{
		gpsMapView.Reset();
		
		LoadClusterInfo(o);
		
		List<Point> listPoint = new ArrayList<Point>();
		
        if(testMode.equalsIgnoreCase("Debug")||testMode.equalsIgnoreCase("Demo"))
        {
        	for(int i = 0; i < RefPtList.size(); i++)
        	{
        		Point p1 = new Point();
        		p1.x = (int) Math.round(RefPtList.get(i).x * MapActivity.X_RATIO);
        		p1.y = (int) Math.round(RefPtList.get(i).y * MapActivity.Y_RATIO);
        		listPoint.add(p1);
        	}
        }
        else
        {
        	listPoint = RefPtList;
        }
        
        List<Integer> FPColor = new ArrayList<Integer>();
       
        FPColor = ClusterList;
		
		for(int i = 0; i < cheadlist.size();i++)
		{
			for(int j = 0; j < ClusterList.size(); j++)
			{
				if(ClusterList.get(j) == cheadlist.get(i))
				{
					FPColor.set(j, i);
				}
			}
		}
	
        gpsMapView.setRPoints(listPoint);	
        gpsMapView.setCIndex(FPColor);
        gpsMapView.invalidate();
        return true;
	}
	// *********************************************************
	// Load Cluster Info
	// *********************************************************
	private void LoadClusterInfo(String o)
	{
		RefPtList.clear();
		ClusterList.clear();
		cheadlist.clear();

		Orientation tag = null;
		
		if(o.equalsIgnoreCase("North")){
    	   tag = Orientation.North;
        }
        if(o.equalsIgnoreCase("South")){
    	   tag = Orientation.South;
        }
        if(o.equalsIgnoreCase("West")){
    	   tag = Orientation.West;
        }
        if(o.equalsIgnoreCase("East")){
    	   tag = Orientation.East;
        }
        
        for(int i = 0; i < LocDB.numRPs; i++)
        {
        	Point p = new Point();
        	p.x = LocDB.x00List.get(i);
        	p.y = LocDB.y00List.get(i);
        	RefPtList.add(p);
        }
        
       
       /*for(int i = 0; i <LocDB.clusterIndexList.get(tag).size(); i++)
        {
        	Integer clist = null;
        	clist = LocDB.clusterIndexList.get(tag).get(i);
        	ClusterList.add(clist);
        }*/
        
        ClusterList.addAll(LocDB.clusterIndexList.get(tag));
        cheadlist = Utilities.uniqueArray(ClusterList);
        
	}
		
	// *********************************************************
	// updatePrefSettings
	// *********************************************************
	private void updatePrefSettings() {
		Building = sharedPrefs.getString("building", "CNIB");
		Floor = sharedPrefs.getString("floor", "2");
		testMode = sharedPrefs.getString("test_mode_pref", "Debug");
	}
	
	// *********************************************************************
	// onTouchEvent
	//
	//
	// @brief: Invoke GPSMapView's gesture scanner to handle screen motion
	// events
	// *********************************************************************
	@Override
	public boolean onTouchEvent(MotionEvent event) {
		return gpsMapView.getGestureScanner().onTouchEvent(event);
	}

	// *********************************************************
	// onStart
	//
	//
	// *********************************************************
	@Override
	public void onStart() {
		super.onStart();
	}

	// *********************************************************
	// onPause
	//
	//
	// *********************************************************
	@Override
	public void onPause() {
		super.onPause();
	}

	// *********************************************************
	// onResume
	//
	//
	// *********************************************************
	@Override
	public void onResume() {
		super.onResume();
	}

	// *********************************************************
	// onStop
	//
	//
	// *********************************************************
	@Override
	public void onStop() {	
		super.onStop();
	}

	// *********************************************************
	// onDestroy
	//
	//
	// *********************************************************
	@Override
	public void onDestroy() {
		mWakeLock.release();  
		super.onDestroy();
	}
}
